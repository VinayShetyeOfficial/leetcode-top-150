# ============================================
# Bubble Sort
# ============================================
def bubble_sort(arr):
    n = len(arr)
    arr = arr.copy()  # Keeps original list safe

    for i in range(n):
        already_sorted = True
        for j in range(n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                already_sorted = False
        if already_sorted:
            break
    return arr


# ============================================
# Insertion Sort
# ============================================
def insertion_sort(arr):
    arr = arr.copy()  # Keeps original list safe
    n = len(arr)

    for i in range(1, n):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr


# ============================================
# Merge Sort
# ============================================
def merge_sort(arr):
    if len(arr) <= 1:
        return arr  # Base case: already sorted

    mid = len(arr) // 2
    left_half = merge_sort(arr[:mid])
    right_half = merge_sort(arr[mid:])
    return merge(left_half, right_half)

def merge(left, right):
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result


# ============================================
# Quick Sort
# ============================================
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[-1]  # last element as pivot
    left = []
    right = []
    for i in range(len(arr) - 1):
        if arr[i] <= pivot:
            left.append(arr[i])
        else:
            right.append(arr[i])
    return quick_sort(left) + [pivot] + quick_sort(right)


# ============================================
# Driver Code
# ============================================
if __name__ == "__main__":
    nums = [10, 7, 8, 9, 1, 5]
    
    print("Bubble Sort:", bubble_sort(nums))
    print("Insertion Sort:", insertion_sort(nums))
    print("Merge Sort:", merge_sort(nums))
    print("Quick Sort:", quick_sort(nums))


"""
============================================
Time Complexity (TC):
- Bubble Sort: O(n^2), Best Case O(n) if already sorted
- Insertion Sort: O(n^2), Best Case O(n) if already sorted
- Merge Sort: O(n log n) in all cases
- Quick Sort: Avg O(n log n), Worst O(n^2) if pivot is poor

Space Complexity (SC):
- Bubble Sort: O(1)
- Insertion Sort: O(1)
- Merge Sort: O(n) (extra space for merging)
- Quick Sort: O(log n) (recursive stack), Worst O(n)
============================================
"""
