# Bubble Sort
-------------
ğŸ‘‰ Repeatedly compares adjacent elements and swaps them if theyâ€™re in the wrong order.
It "bubbles up" the largest element to the end in each round.

def bubble_sort(arr):
    n = len(arr)
    arr = arr.copy()  # Keeps original list safe

    for i in range(n):
        already_sorted = True
        for j in range(n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                already_sorted = False
        if already_sorted:
            break
    return arr

num_sorted = bubble_sort(num)

================================================================


Insertion Sort
--------------

def insertion_sort(arr):
    arr = arr.copy()  # Keeps original list safe
    n = len(arr)

    for i in range(1, n):
        key = arr[i]
        j = i - 1

        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1

        arr[j + 1] = key

    return arr

================================================================

# Merge Sort
------------

def merge_sort(arr):
    if len(arr) <= 1:
        return arr  # Base case: list is already sorted

    mid = len(arr) // 2

    # Split the list into two halves
    left_half = merge_sort(arr[:mid])
    right_half = merge_sort(arr[mid:])

    # Merge the sorted halves
    return merge(left_half, right_half)


def merge(left, right):
    result = []
    i = j = 0

    # Compare elements and build the result list
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    # Add leftover elements from both halves
    result.extend(left[i:])
    result.extend(right[j:])

    return result


if __name__ == '__main__':
    nums = [12, 11, 13, 5, 6]
    sorted_nums = merge_sort(nums)
    print(f'Sorted: {sorted_nums}')


================================================================

# Quick Sort
------------

# Quick Sort
def quick_sort(arr):
    # Base case: a list with 0 or 1 element is already sorted
    if len(arr) <= 1:
        return arr

    # Choose a pivot (here we take the last element)
    pivot = arr[-1]
    left = []
    right = []

    # Partitioning
    for i in range(len(arr) - 1):  # exclude the pivot
        if arr[i] <= pivot:
            left.append(arr[i])
        else:
            right.append(arr[i])

    # Recursively sort and combine
    return quick_sort(left) + [pivot] + quick_sort(right)


if __name__ == '__main__':
    nums = [10, 7, 8, 9, 1, 5]
    sorted_nums = quick_sort(nums)
    print(f'Sorted: {sorted_nums}')




















